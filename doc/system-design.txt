 
FPNN一句话总结：
客户端：一个API解决所有操作
服务器：一个类继承解决所有RPC，同步异步，编码解码问题。

一，背景
鉴于使用Thrift 开发RTM遇到太多的坑，耗费大量的资源解决Thrift本身问题。
基于对公司基础架构工具的准备及技术积累，决定开发一个更适合公司业务及基础架构的的RPC框架。

二，需求
	RPC系统计划，第一版 框架支持 TCP，协议支持msgpack，第二版框架支持HTTP，协议支持raw json
	1）msgpack 协议支持  -- done
	2)  json 协议支持  -- done
	3)  协议参数动态调整支持（必选参数和可选参数）-- done
	4）服务器异步支持  – done
	5）客户端异步支持  – done
	6）TCP支持  – done
	7）HTTP支持  – done
	8）服务器主动push消息给客户端 － done
	9）服务端 IO 线程池支持   – done
	10）服务端 Work 线程池支持   – done
	11）服务端 主动发消息给客户端 线程池支持   – done
	12）客户端 IO 线程池支持   – done
	13）客户端 Work 线程池支持   – done
	14）客户端 接收服务器push消息 线程池支持   – done
	15）动态调整系统级参数  – done
	16）动态调整框架级参数  – done
	17）实时查看服务运行状态  – done
	18）实时查看各参数状态  – done
	19）failover 支持  – done
	20）统一Log汇总支持  – done
	21）优雅退出，确保先不再接受请求，处理完所有积压数据再退出  – done
	22）异常情况统一处理  – done
	23）同一个实例同时支持 TCP & HTTP  – done
	24）同一个实例同时支持 JSON & msgpack  – done
	25）支持提前返回answer  – done
	26）支持延后返回answer  – done
	27）请求响应时间统计
	28）慢请求统计
	29）集群注册支持  –  not done
	30）数据协调支持  – not done
	31）数据同步支持  – not done
	32）分布式部署支持  – not done
	33）优先执行系统内置命令 － done
 
	注：29-32 将在 实际的分布式系统中被支持，框架只支持他们需要的基础功能

三，适用范围
	1，分布式缓存系统
	2，后台基于TCP协议的server
	3，后台基于HTTP协议的server
	4，业务后台系统
	5，需要高性能服务的系统
	6，其他RPC系统

四，协议选择
	1，协议header详情：FPNN protocol
	2，msgpack支持
	3，raw json支持
		1) rapidjson

五，框架设计
	1,服务器端
		服务器端的核心为 TCPEpollServer，主要结构如下图：
		+------------------------------------------------------------------------------------------------+
		|                                      TCPEpollServer                                            |
		|------------------------------------------------------------------------------------------------|
		| +--------------------------------+  +----------------------+ +-------------------------------+ |
		| |                                |  |                      | |                               | |
		| |   Partitioned Connection Map   |  |I/O Thread Pool Array | |                               | |
		| |                                |  |                      | |    Server Master Processor    | |
		| +--------------------------------+  | +------------------+ | |                               | |
		| +--------------------------------+  | |                  | | |                               | |
		| |                                |  | | I/O Thread Pool  | | +-------------------------------+ |
		| |       Connection Map           |  | |                  | |                                   |
		| |                                |  | +------------------+ | +---------------+ +-------------+ |
		| +--------------------------------+  +----------------------+ |               | |   Answer    | |
		|                                                              | Worker Thread | |  Callback   | |
		| +----------------------------------------------------------+ | Pool Array    | |   Thread    | |
		| |                                                          | |               | |    Pool     | |
		| |                 TCPServerConnection                      | |               | |    Array    | |
		| |                                                          | |+-------------+| |+-----------+| |
		| +----------------------------------------------------------+ ||             || ||  Answer   || |
		| +--------------------------+  +----------------------------+ ||  Worker     || || Callback  || |
		| |                          |  |                            | ||  Thread Pool|| ||  Thread   || |
		| |    Recv Buffer           |  |     Send Buffer            | ||             || ||   Pool    || |
		| |                          |  |                            | |+-------------+| |+-----------+| |
		| +--------------------------+  +----------------------------+ +---------------+ +-------------+ |
		|                                                                                                |
		+------------------------------------------------------------------------------------------------+

		PartitionedConnectionMap 保存和控制服务器所有的连接。包含数个 ConnectionMap，为 ConnectionMap 的容器，根据 socket 无锁 hash 后，可获得连接具体保存在哪一个 ConnectionMap 中。
		ConnectionMap 为最终保存和控制服务器连接的容器。为了避免锁共享，每个 ConnectionMap 保存服务器的一部分连接。
		TCPServerConnection 为服务器连接类，控制数据的收发和解码。每个连接包含一个 Recv Buffer 和一个 Send Buffer。

		Recv Buffer 实际控制连接上数据的接收。
		Send Buffer 实际控制连接上数据的发送。包含有一个本连接的数据发送队列。

		I/O Thread Pool Array 为 I/O Thread Pool 的无锁 hash 封装。
		I/O Thread Pool 提供线程，实际执行连接数据的收发和解码工作。

		Server Master Processor 控制解码之后数据包的分发和请求的处理，以及应答的编码和投递。
		Worker Thread Pool Array 为 worker Thread Pool 的无锁 hash 封装。
		Worker Thread Pool 提供线程，实际执行请求的处理，和应答的编码。
		Answer Callback Thread Pool Array 为 Answer Callback Thread Pool 的无锁 hash 封装。
		Answer Callback Thread Pool 提供线程，实际执行服务器收到客户端对服务器发出的请求所对应的应答的回调处理。
 
	2, 客户端
	客户端计划分为两类版本。
		a. 第一类为普通版本，适用于同一进程中只有少量客户端（<10）的情况。该类可用任何兼容FPNN协议的简单客户端逻辑实现。
			如果实现恰当，性能可高于第二类版本，如果实现不当，性能将会低于第二类版本。
			因时间关系，该类别暂未提供实现。

		b. 第二类为大量客户端协作版本，适用于进程中可能存在大量客户端（0～100,000）的情况。
			该类客户端针对大量并存的客户端，整合并优化了客户端的收发逻辑，使众多客户端在各有不同变现的情况下，共享底层的收发处理逻辑，和相关的系统资源。在收发效率不受明显影响的情况下，极大地减少了系统线程的数量和其他资源的开销。

			该类客户端由两部分组成：TCPClient 和 ClientEngine。
			TCPClient 为客户端的具体表现，为连接开发者和 ClientEngine 的桥梁。
			ClientEngine 为客户端的核心，为全部的 TCPClient 所共享，执行具体的数据收发、编解码、应答回调执行，服务器Push请求处理等操作。

			ClientEngine 主要结构、TCPClient 和 ClientEngine 关系如下图：
			+------------------+ +-----------------+ +-----------------+               +-------------------+
			|    TCP Client    | |    TCP Client   | |   TCP Client    |  ... ... ...  |     TCP Client    |
			|                  | |                 | |                 |               |                   |
			+------------------+ +-----------------+ +-----------------+               +-------------------+
			+-----------------------------------------------------------------------------------------------+
			|                                       Client Engine                                           |
			|-----------------------------------------------------------------------------------------------|
			|                                                                                               |
			|  +-------------------------+ +----------------------+ +----------------+ +----------------+   |
			|  |       Partitioned       | |                      | |                | |                |   |
			|  |      Connection Map     | | I/O Thread Pool Array| |    Worker      | |    Answer      |   |
			|  |                         | |                      | |                | |                |   |
			|  |+-----------------------+| |+--------------------+| |    Thread      | |    Callback    |   |
			|  ||                       || ||                    || |                | |                |   |
			|  ||    Connection Map     || ||  I/O Thread Pool   || |     Pool       | |    Thread      |   |
			|  ||                       || ||                    || |                | |                |   |
			|  |+-----------------------+| |+--------------------+| |    Array       | |   Pool Array   |   |
			|  +-------------------------+ +----------------------+ |                | |                |   |
			|  +--------------------------------------------------+ | +------------+ | | +------------+ |   |
			|  |                                                  | | |            | | | |            | |   |
			|  |                TCP Client Connection             | | |   Worker   | | | |   Answer   | |   |
			|  |                                                  | | |            | | | |            | |   |
			|  +--------------------------------------------------+ | |   Thread   | | | |  Callback  | |   |
			|  +-----------------------+ +------------------------+ | |            | | | |            | |   |
			|  |                       | |                        | | |    Pool    | | | | Thread Pool| |   |
			|  |      Recv Buffer      | |      Send Buffer       | | |            | | | |            | |   |
			|  |                       | |                        | | +------------+ | | +------------+ |   |
			|  +-----------------------+ +------------------------+ +----------------+ +----------------+   |
			+-----------------------------------------------------------------------------------------------+
			
			在 ClientEngine 中：
			PartitionedConnectionMap 统一保存和控制客户端的所有的连接。包含数个 ConnectionMap，为 ConnectionMap 的容器，根据 socket 无锁 hash 后，可获得连接具体保存在哪一个 ConnectionMap 中。
			ConnectionMap 为最终保存和控制客户端连接的容器。为了避免锁共享，每个 ConnectionMap 保存服务器的一部分连接。
			TCPClientConnection 为客户端连接类，控制数据的收发和解码。每个连接包含一个 Recv Buffer 和一个 Send Buffer。
			Recv Buffer 实际控制连接上数据的接收。
			Send Buffer 实际控制连接上数据的发送。包含有一个本连接的数据发送队列。
 
 
 
